name: SolBotProd

on:
  push:
    tags:
      - v*.*.*
env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: sol_bot

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      imageTag: ${{ steps.extractImageTag.outputs.imageTag }}
    steps:
      - id: extractImageTag
        name: 提取镜像标签
        run: tag=${{github.ref}} && imageTag="${tag##*tags/v}" && echo "::set-output name=imageTag::$(echo $imageTag)"
        shell: bash
  build-and-push:
    runs-on: ubuntu-latest
    needs: tag
    steps:
      #      - name: Configure AWS credentials
      #        uses: aws-actions/configure-aws-credentials@v1
      #        with:
      #          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
      #          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
      #          aws-region: ${{ env.AWS_REGION }}
      #      - name: Login to Amazon ECR
      #        id: login-ecr
      #        uses: aws-actions/amazon-ecr-login@v1
      - uses: actions/checkout@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REPOSITORY: "abcd-ap-southeast-1.cr.bytepluses.com/bot/sol_bot"
          IMAGE_TAG: ${{ needs.tag.outputs.imageTag }}
          USERNAME: ${{secrets.username}}
          PASSWORD: ${{secrets.password}}
        #          REBOOT_HOOK_URL: ${{ secrets.EXCHANGE_REBOOT_HOOK_URL }}
        run: |
          docker build -f Dockerfile -t $REPOSITORY:$IMAGE_TAG .
          docker login --username=$USERNAME abcd-ap-southeast-1.cr.bytepluses.com -p $PASSWORD
          docker tag $REPOSITORY:$IMAGE_TAG $REPOSITORY:$IMAGE_TAG
          docker push $REPOSITORY:$IMAGE_TAG
  #          curl $EXCHANGE_REBOOT_HOOK_URL
#  build-and-push:
#    runs-on: ubuntu-latest
#    needs: tag
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#      - uses: actions/checkout@v2
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: ${{ env.ECR_REPOSITORY }}
#          IMAGE_TAG: ${{ needs.tag.outputs.imageTag }}
#        #          REBOOT_HOOK_URL: ${{ secrets.EXCHANGE_REBOOT_HOOK_URL }}
#        run: |
#          docker build -f Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"
#          docker build -f Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#          curl $EXCHANGE_REBOOT_HOOK_URL


